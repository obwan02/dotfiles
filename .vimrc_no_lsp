set mouse=a
set termguicolors

" set the runtime path to include Vundle and initialize

call plug#begin('~/.vim/plugged')

" Requirements for neo-tree
Plug 'nvim-lua/plenary.nvim'
Plug 'kyazdani42/nvim-web-devicons'
Plug 'MunifTanjim/nui.nvim'

Plug 'nvim-neo-tree/neo-tree.nvim'
Plug 'junegunn/fzf', { 'do': { -> fzf#install() } }
Plug 'ibhagwan/fzf-lua', {'branch': 'main'}

Plug 'sheerun/vim-polyglot' " Provides basic syntax highlighting for filetypes without language server and built in syntax support (mainly obscure filtypes such as fish scripts)

Plug 'feline-nvim/feline.nvim'
Plug 'tpope/vim-eunuch'
Plug 'catppuccin/nvim', {'as': 'catppuccin'}
Plug 'glepnir/dashboard-nvim'
Plug 'nvim-treesitter/nvim-treesitter', {'do': ':TSUpdate'}

call plug#end()

" For nvim dashboard
let g:dashboard_default_executive = 'fzf'
let g:neo_tree_remove_legacy_commands = 1

lua << EOF

require'fzf-lua'.setup {
  grep = { git_icons = false },
  files = { git_icons = false },
}

require("catppuccin").setup({
    flavour = "mocha", -- latte, frappe, macchiato, mocha
    background = { -- :h background
        light = "latte",
        dark = "mocha",
    },
    compile_path = vim.fn.stdpath("cache") .. "/catppuccin",
    transparent_background = false,
    term_colors = false,
    dim_inactive = {
        enabled = false,
        shade = "dark",
        percentage = 0.15,
    },
    styles = {
        comments = { "italic" },
        conditionals = { "italic" },
        loops = {},
        functions = {},
        keywords = {},
        strings = {},
        variables = {},
        numbers = {},
        booleans = {},
        properties = {},
        types = {},
        operators = {},
    },
    color_overrides = {},
    custom_highlights = {},
    integrations = {
        cmp = true,
        gitsigns = true,
        nvimtree = true,
        telescope = true,
        treesitter = true,
        -- For more plugins integrations please scroll down (https://github.com/catppuccin/nvim#integrations)
    },
})

local ctp_feline = require('catppuccin.groups.integrations.feline')

require("feline").setup({
	components = ctp_feline.get(),
})

require'nvim-treesitter.configs'.setup {
	highlight = {
		enable = true,
		-- Setting this to true will run `:h syntax` and tree-sitter at the same time.
		-- Set this to `true` if you depend on 'syntax' being enabled (like for indentation).
		-- Using this option may slow down your editor, and you may see some duplicate highlights.
		-- Instead of true it can also be a list of languages
		additional_vim_regex_highlighting = false,
	},
}

local home = os.getenv('HOME')
local db = require('dashboard')

db.custom_center = {
	{icon = '  ',
		desc = 'Recently laset session                  ',
		shortcut = 'SPC s l',
		action ='SessionLoad'},
	{icon = '  ',
		desc = 'Recently opened files                   ',
		action =  'DashboardFindHistory',
		shortcut = 'SPC f h'},
	{icon = '  ',
		desc = 'Find  File                              ',
		action = 'FZF',
		shortcut = 'SPC f f'},
	{icon = '  ',
		desc ='File Browser                            ',
		action =  'Neotree filesystem reveal=false float',
		shortcut = 'SPC f b'},
	{icon = '  ',
		desc = 'Find  word                              ',
		aciton = 'DashboardFindWord',
		shortcut = 'SPC f w'},
	{icon = '  ',
		desc = 'Open .vimrc                             ',
		action = 'edit ~/.vimrc',
		shortcut = 'SPC f d'},
}

EOF

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" You will have bad experience for diagnostic messages when it's default 4000.
" (coc.vim)
set updatetime=300

" Set spelling language
set spelllang=en_nz

" Set internal encoding of vim, not needed on neovim, since coc.nvim using some
" unicode characters in the file autoload/float.vim
set encoding=utf-8

" TextEdit might fail if hidden is not set.
set hidden

" Formats a file with clang-format
function! CXXFormatFile()
	let l:lines = "all"
	py3f /usr/share/clang/clang-format-10/clang-format.py
endfunction

set signcolumn=number
set tabstop=4
set softtabstop=4
set shiftwidth=4
set noexpandtab
set autoindent
set number
set autoread
set keywordprg=:Man 
let mapleader=","
set nohlsearch

let g:catppuccin_flavour = "dusk"
colorscheme catppuccin

set switchbuf+=useopen
nnoremap <SPACE> i <Esc>
nnoremap <C-f> :FzfLua files<CR>
nnoremap <C-k> O<Esc>j
nnoremap <C-j> o<Esc>k

" -- LSP BINDINGS

lua << EOF
vim.api.nvim_create_autocmd('User', {
	pattern = 'LspAttached',
	desc = 'LSP actions',
	callback = function()
		local bufmap = function(mode, lhs, rhs)
		local opts = {buffer = true}
		vim.keymap.set(mode, lhs, rhs, opts)
	end

	-- Displays hover information about the symbol under the cursor
	bufmap('n', 'K', '<cmd>lua vim.lsp.buf.hover()<cr>')

	-- Jump to the definition
	bufmap('n', 'gd', '<cmd>lua vim.lsp.buf.definition()<cr>')

	-- Jump to declaration
	bufmap('n', 'gD', '<cmd>lua vim.lsp.buf.declaration()<cr>')

	-- Lists all the implementations for the symbol under the cursor
	bufmap('n', 'gi', '<cmd>lua vim.lsp.buf.implementation()<cr>')

	-- Jumps to the definition of the type symbol
	bufmap('n', 'go', '<cmd>lua vim.lsp.buf.type_definition()<cr>')

	-- Lists all the references 
	bufmap('n', 'gr', '<cmd>lua vim.lsp.buf.references()<cr>')

	-- Displays a function's signature information
	bufmap('n', '<C-d>', '<cmd>lua vim.lsp.buf.signature_help()<cr>')

	-- Renames all references to the symbol under the cursor
	bufmap('n', '<leader>r', '<cmd>lua vim.lsp.buf.rename()<cr>')

	-- Selects a code action available at the current cursor position
	bufmap('n', '<leader>a', '<cmd>lua vim.lsp.buf.code_action()<cr>')
	bufmap('x', '<leader>a', '<cmd>lua vim.lsp.buf.range_code_action()<cr>')

	-- Show diagnostics in a floating window
	bufmap('n', 'gl', '<cmd>lua vim.diagnostic.open_float()<cr>')

	-- Move to the previous diagnostic
	bufmap('n', '[d', '<cmd>lua vim.diagnostic.goto_prev()<cr>')

	-- Move to the next diagnostic
	bufmap('n', ']d', '<cmd>lua vim.diagnostic.goto_next()<cr>')
	end
})
EOF

" Shortcut for neotree
nnoremap <leader>x :Neotree filesystem reveal=false float<CR>
nnoremap <leader>X :Neotree filesystem reveal=true left<CR>

" Ripgrep for text searcing files using fzf
nnoremap <leader>ss :lua require("fzf-lua").grep_project()<CR>

" Spellcheck
nnoremap <leader>sc :setlocal spell!<CR>

" for highlighting searches
nnoremap <leader>hs :set hlsearch!<CR>

" Templates for various languages
nnoremap <silent> <leader>tp ggO#!/usr/bin/env python3<CR><CR>if __name__ == "__main__":<CR>pass<Esc><C-o>

" Shortcut to edit .vimrc
nnoremap <leader>ev :vsplit ~/.vimrc<CR>


" Remap Shift-Tab to exit insert mode
inoremap <S-Tab> <Esc>
vnoremap <S-Tab> <Esc>
" Abbreviations
" iabbrev ssig obwan02 - obwan02@hotmail.co.nz

" For quick diagnostics
command CD CocDiagnostics

autocmd! BufNewFile,BufRead *.shader set ft=glsl
autocmd Filetype c,go setlocal cin
autocmd Filetype python setlocal expandtab tabstop=4 shiftwidth=4 softtabstop=4
autocmd Filetype json,html setlocal tabstop=2 shiftwidth=2 softtabstop=2

" For Neovide
let g:neovide_cursor_vfx_mode = "railgun"
let g:neovide_cursor_trail_length = 0
let g:neovide_cursor_animation_length = 0.1
